doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible" content="IE=edge")
        meta(name="viewport" content="width=device-width, initial-scale=1.0")
        link(rel="stylesheet" type="text/css" href="bundle.css")
        link(rel="icon" type="image/x-icon" href="icon.ico")
        title Ct.js installer
    body
        #theTemplate(style="display: none;")
            #theMainContent
                |:if:appState:is:panic:
                h1
                    img(src="IconError.svg")
                    | Error!
                p :panicMessage:
                |:endif:appState:
                |:if:appState:is:notStarted:
                h1 Welcome to ct.js!
                p Youâ€™re almost there! Press this big button to open a door to a wonderful world of game development:
                button.big(data-call="install") Install ct.js
                |:endif:appState:

                |:if:appState:is:inProgress:
                h1 Workingâ€¦
                ul
                    |:each:steps:
                    li
                        |:if:index:gt:parent.currentStep:
                        img(src="IconCircle.svg")
                        |:endif:index:
                        |:if:index:eq:parent.currentStep:
                        img.spin(src="IconSpin.svg")
                        |:endif:index:
                        |:if:index:lt:parent.currentStep:
                        img(src="iconCheck.svg")
                        |:endif:index:
                        | :name:
                        |:if:index:is:1:
                        |:if:parent.currentStep:eq:index:
                        | (:parent.progress:%)
                        |:endif:parent.currentStep:
                        |:endif:index:
                    |:endeach:steps:
                |:endif:appState:
                |:if:appState:is:complete:
                h1
                    img(src="IconCheckBig.svg")
                    | All done!
                p Ct.js was successfully installed and is ready to run:
                button.big(data-call="runCt") Run ct.js
                |:endif:appState:
            #theSidebar
                img(src="HammerCat.svg")
            #theFooter
                |:if:appState:is:panic:
                button(data-call="quit") Quit
                |:endif:appState:

                |:if:appState:is:notStarted:
                | Will install at :installFolder:
                button(data-call="promptInstallFolder") Changeâ€¦
                |:endif:appState:

                |:if:appState:is:inProgress:
                | Pro tip: use the same installer to update ct.js!
                button(data-call="quit") Abort
                |:endif:appState:

                |:if:appState:is:complete:
                | Pro tip: use the same installer to update ct.js!
                button(data-call="quit") Quit
                |:endif:appState:
        #theMainLayout

        script(src="morphdom.min.js")
        script(src="shum.js")
        script.
            const template = document.getElementById('theTemplate').innerHTML;
            const state = {
                steps: [{
                    name: 'Get latest releases'
                }, {
                    name: 'Download new release'
                }, {
                    name: 'Unpack ct.js'
                }, {
                    name: 'Create shortcuts'
                }],
                automatic: false,
                panicMessage: false,
                progress: 0,
                currentStep: 0,
                appState: 'notStarted', // inProgress, panic, complete
                installFolder: 'C:\\Users\\user\\AppData\\Local\\ct.js',

                install: (e, state) => {
                    state.appState = 'inProgress';
                    state.currentStep = 0;
                    pywebview.api.getGithubData().then(data => {
                        state.downloadUrl = data.assets
                            .find(a =>
                                a.name.indexOf(`win${state.x64 ? '64' : '32'}`) !== -1 &&
                                a.name.indexOf('darwin') === -1
                            ).browser_download_url;
                        console.log('Download discovered:', state.downloadUrl);
                        state.currentStep = 1;
                        render();
                        return pywebview.api.startDownload(state.downloadUrl)
                    }).then(() => {
                        state.currentStep = 2;
                        render();
                        return pywebview.api.unpack();
                    }).then(() => {
                        state.currentStep = 3;
                        render();
                        return pywebview.api.createShortcuts();
                    }).then(() => {
                        if (!state.automatic) {
                            state.appState = 'complete';
                            render();
                        } else {
                            state.runCt(false, state);
                        }
                    });
                },
                promptInstallFolder: (e, state) => {
                    pywebview.api.promptInstallFolder().then(path => {
                        state.installFolder = path;
                        render();
                    });
                },
                runCt: () => {
                    pywebview.api.runCt();
                },
                quit: () => {
                    pywebview.api.quit();
                }
            };
            const render = window.shum.mount(template, state, document.getElementById('theMainLayout'));

            window.addEventListener('pywebviewready', () => {
                Promise.all([
                    pywebview.api.canAutostart(),
                    pywebview.api.getInstallDir()
                ]).then(results => {
                    state.automatic = results[0];
                    state.installFolder = results[1];
                    if (state.automatic) {
                        state.install(false, state);
                    }
                    render();
                });
                pywebview.api.getArch().then(response => {
                    state.x64 = response.x64;
                });
                window.signals = {
                    downloadProgress: (progress) => {
                        state.progress = progress;
                        render();
                    },
                    panic: (message) => {
                        state.panicMessage = message;
                        render();
                    }
                }
            });
